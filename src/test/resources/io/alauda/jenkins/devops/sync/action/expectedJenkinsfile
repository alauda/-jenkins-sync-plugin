pipeline {
  agent {
    label 'golang'
  }
  stages {
    stage('clone') {
      steps {
        script {
          env.CODE_REPO = "http://62.234.104.184:31101/root/go-test-private"
          env.CREDENTIAL_ID = "global-credentials-gitlabsecret"
          env.BRANCH = "*/master"

          def scmVars = checkout([
            $class: 'GitSCM',
            branches: [[name: "${BRANCH}"]],
            extensions: [[
              $class: 'SubmoduleOption',
              recursiveSubmodules: true,
              reference: '',
            ],[
              $class: 'RelativeTargetDirectory',
              relativeTargetDir: 'src'
            ]],
            userRemoteConfigs: [[
              credentialsId: "${CREDENTIAL_ID}",
              url: "${CODE_REPO}"
            ]]
          ])

          env.GIT_COMMIT = scmVars.GIT_COMMIT
          env.GIT_BRANCH = scmVars.GIT_LOCAL_BRANCH
          env.RELATIVE_DIRECTORY = 'src'
        }

      }
    }
    stage('golang') {
      steps {
        script {
          env.GOPATH = WORKSPACE

          dir(RELATIVE_DIRECTORY) {
            container('golang') {
              sh 'go build'
            }
          }
        }

      }
    }
    stage('build-docker') {
      steps {
        script {
          def retryCount = 3
          def repositoryAddr = 'harbor.harbor.sparrow.host/auto-e2erepo/hello-go'.replace("http://","").replace("https://","")
          env.IMAGE_REPO = repositoryAddr
          env.IMAGE_TAG = "autolatest"
          def imageRepoTag = "${IMAGE_REPO}:${IMAGE_TAG}"
          def credentialId = ''
          credentialId = "zjproject-dockercfg-harbor-registry-harborsecret"
          dir(RELATIVE_DIRECTORY) {
            container('tools'){
              retry(retryCount) {
                if (credentialId != '') {
                  withCredentials([usernamePassword(credentialsId: "${credentialId}", passwordVariable: 'PASSWD', usernameVariable: 'USER')]) {
                    sh "docker login ${IMAGE_REPO} -u ${USER} -p ${PASSWD}"
                  }
                }
                sh """
                docker build -t ${imageRepoTag} -f Dockerfile  .
                docker push ${imageRepoTag}
                """
                if (credentialId != '') {
                  sh "docker logout ${imageRepoTag}"
                }
              }
            }
          }
        }

      }
    }
    stage('deployService') {
      steps {
        script {
          env.CREDENTIAL_ID = ""
          env.NEW_IMAGE = "${IMAGE_REPO}:${IMAGE_TAG}"
          container('tools') {
            timeout(time:300, unit: "SECONDS"){
              alaudaDevops.withProject(env.ALAUDA_PROJECT) {

                def p = alaudaDevops.selector('deploy', 'hello-go').object()
                p.metadata.labels['BUILD_ID']=env.BUILD_ID
                p.spec.template.spec.containers[0]['image'] = "${NEW_IMAGE}"
                if (p.spec.template.spec.imagePullSecrets == null) {
                  p.spec.template.spec.imagePullSecrets= [
                    [name: "${CREDENTIAL_ID}"]
                  ]
                }
                alaudaDevops.apply(p, "--validate=false")
              }
            }
          }
        }

      }
    }
  }
  environment {
    ALAUDA_PROJECT = 'zjproject'
  }
  post {
    always {
      echo 'clean up workspace'
      script {
        try{
          deleteDir()
        }catch(e){
          echo e.getMessage()
        }
      }


    }

  }
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '200'))
  }
}